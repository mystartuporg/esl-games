# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: server
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-1
  apiGateway:
    apiKeys:
      - name: esl-games-api-key             #Replace with API Key Name on deployment
        value: ${process.env.API_KEY}       #Replace with API Key Value on deployment
        description: Key for ESL Games API  #Replace with API Key Description on deployment

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  patterns:
    - '../../node_modules/serverless-mysql/**'
    - '../../node_modules/mysql/**'
    - '../../node_modules/mysql2/**'
    - '../../node_modules/denque/**'
    - '../../node_modules/generate-function/**'
    - '../../node_modules/iconv-lite/**'
    - '../../node_modules/long/**'
    - '../../node_modules/lru-cache/**'
    - '../../node_modules/named-placeholders/**'
    - '../../node_modules/seq-queue/**'
    - '../../node_modules/sqlstring/**'
    - '../../node_modules/is-property/**'
    - '../../node_modules/pseudomap/**'
    - '../../node_modules/yallist/**'
    - '../../node_modules/safer-buffer/**'

#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**
plugins:
  - serverless-offline
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-domain-manager

custom:
  stage: ${opt:stage, self:provider.stage}
  domains:
    prod: esl-games-api.retsol.ph
    staging: staging-esl-games-api.retsol.ph
    dev: dev-esl-games-api.retsol.ph
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: ${self:custom.stage}
    certificateName: '*.retsol.ph'
    createRoute53Record: true
    endpointType: regional

functions:
  hello:
    handler: handler.hello
  userInformation:
    handler: userInformation.userInformation
    events:
      - http:
          path: userInfo
          method: post
          cors:
            origin: '*'
          private: true
  userTransaction:
    handler: userTransaction.userTransaction
    events:
      - http:
          path: userTran
          method: post
          cors:
            origin: '*'
          private: true
  getRewards:
    handler: getRewards.getRewards
    events:
      - http:
          path: rewards
          method: get
          cors:
            origin: '*'
          private: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
